@page "/"
@using TraktSync.Config
@using TraktSync.Handler

@inject ISnackbar Snackbar
@inject ConfigHandler ConfigHandler
@inject SyncHandler SyncHandler

<PageTitle>Trakt sync</PageTitle>

<MudText Typo="Typo.h2">Trakt sync</MudText>

<MudExpansionPanels MultiExpansion>
    <MudExpansionPanel Text="Trakt" Expanded>
        <TraktComponent Config="_config" OnChangeConfig="UpdateSync"/>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Emby">
        <EmbyComponent Config="_config" OnChangeConfig="UpdateSync"/>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Plex">
        <PlexComponent Config="_config" OnChangeConfig="UpdateSync"/>
    </MudExpansionPanel>
</MudExpansionPanels>
<MudStack Row Justify="Justify.FlexEnd" Class="mt-4">
    <MudSpacer/>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Sync" Disabled="_isSyncing">Sync</MudButton>
</MudStack>

@code {
    private Config _config = new();
    private bool _isSyncing;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _config = ConfigHandler.GetAsync() ?? new Config();
        }
        catch
        {
            Snackbar.Add("Fail to load config!", Severity.Error);
            _config = new Config();
        }

        await Task.CompletedTask;
    }

    private void UpdateSync(Config config)
    {
        _config = config;

        try
        {
            ConfigHandler.UpdateConfig(_config);
            StateHasChanged();
            
            Snackbar.Add("Config saved!", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Fail to save!", Severity.Error);   
        }
    }
    
    private async Task Sync()
    {
        StateHasChanged();
        _isSyncing = true;
        
        try
        {
            await SyncHandler.SyncAsync();
            Snackbar.Add("Synced!", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Sync failed!", Severity.Error);
        }
        finally
        {
            _isSyncing = false;
            StateHasChanged();
        }
    }
}